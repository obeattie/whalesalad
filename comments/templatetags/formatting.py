"""Tags and filters for BLT formatting."""

from django import template
from django.template.defaultfilters import stringfilter
from django.utils.encoding import force_unicode, smart_str
from django.utils.safestring import mark_safe

from blt.misc import markdown as markdown_module

register = template.Library()

@register.filter
@stringfilter
def markdown(value, arg=''):
    """
    Runs Markdown over a given value, optionally using various
    extensions python-markdown supports.
    
    Syntax::
    
        {{ value|markdown:"extension1_name,extension2_name..." }}
    
    To enable safe mode, which strips raw HTML and only returns HTML
    generated by actual Markdown syntax, pass "safe" as the first
    extension in the list.
    """
    extensions = [e for e in arg.split(',') if e]
    if len(extensions) > 0 and extensions[0] == 'safe':
        extensions = extensions[1:]
        safe_mode = True
    else:
        safe_mode = False
    return mark_safe(force_unicode(markdown_module.markdown(smart_str(value), extensions, safe_mode=safe_mode)))
markdown.is_safe = True

@register.filter
@stringfilter
def ownership(value):
    """Appends an apostrophy and an 's' -- but only if the 's' is necessary
       (it is not when there is a trailing 's' on the name already.)"""
    if value[-1] == 's':
        return '%s\'' % value
    else:
        return '%s\'s' % value